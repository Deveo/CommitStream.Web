(function() {
  var handlebarsUrl = '//cdnjs.cloudflare.com/ajax/libs/handlebars.js/2.0.0-alpha.4/handlebars.amd.min',
    requirejsUrl = '//cdnjs.cloudflare.com/ajax/libs/require.js/2.1.14/require.min.js';

  function configureCommitStreamDependencies() {
    require.config({
      paths: {
        handlebars: handlebarsUrl
      }
    });
  }

  var deps = ['handlebars'];

  function hasAllDeps() {
    if (!window.requirejs) return false;
    for (var i = 0; i < deps.length; i++) {
      if (!requirejs.defined(deps[i])) return false;
    }
    return true;
  }

  var assetDetailInitTmpl = null;
  var assetDetailCommitsTmpl = null;

  function renderInit(commitStreamDomId, data) {
    try {
      if (assetDetailInitTmpl === null) {
        getCompiledTemplate('assetDetailInit.html', function(tmpl) {
          assetDetailInitTmpl = tmpl;
          var content = tmpl(data);
          $(commitStreamDomId).html(content);
          checkIfNextPage(data);
        });
      } else {
        var content = assetDetailInitTmpl(data);
        $(commitStreamDomId).html(content);
        checkIfNextPage(data);

      $(commitStreamDomId).find('.cs-refresh').unbind('click');
      $(commitStreamDomId).find('.cs-refresh').bind('click', queryCommitStreamRefresh);
      $(commitStreamDomId).find('.toggle-cs-autorefresh').unbind('click');
      $(commitStreamDomId).find('.toggle-cs-autorefresh').bind('click', autoRefreshToggle);
      if (autoRefreshIntervalId) {
        $(commitStreamDomId).find('.toggle-cs-autorefresh').prop('checked', true);
      }
    } catch (ex) {
      window.CommitStream.errorHandler();
    }
  }

  function renderCommits(data) {
    try {
      if (assetDetailCommitsTmpl === null) {
        getCompiledTemplate('assetDetailCommits.html', function(tmpl) {
          assetDetailCommitsTmpl = tmpl;
          var content = tmpl(data);
          $('#scrollable-content').append(content);
          checkIfNextPage(data);
        });
      } else {
        var content = assetDetailCommitsTmpl(data);
        $('#scrollable-content').append(content);
        checkIfNextPage(data);
      }
    } catch (ex) {
      window.CommitStream.errorHandler();
    }
  }

  function compileSource(source, cb) {
    require(deps, function(handlebars) {
      cb(handlebars.default.compile(source));
    }, window.CommitStream.errorHandler);
  }

  function getTemplate(template, cb) {
    var tmplUrl = '{{{assetDetailTemplateUrl}}}' + template;
    $.get(tmplUrl).done(cb).fail(window.CommitStream.errorHandler);
  }

  function getCompiledTemplate(template, cb) {
    getTemplate(template, function(source) {
      compileSource(source, cb);
    });
  }

  function setData(data) {
    data.noCommits = data.commits.length < 1;
    data.resourcePath = "{{{resourcePath}}}";
    data.lastPage = false;
    if (!data._links || !data._links.next) {
      data.lastPage = true;
    }
  }

  function checkIfNextPage(data) {
    if (!data._links || !data._links.next) {
      $('#scrollable-content').unbind('scroll');
      $('#scrollable-content').attr("next", '');
    } else {
      $('#scrollable-content').attr('next', data._links.next);
      bindScrollEvent('#scrollable-content');
    }
  }

  function thereAreNoCommits(data) {
    return (!data || !data.commits);
  }

  function getUrlToQuery(workitem) {
    if ($('#scrollable-content').attr("next")) {
      return $('#scrollable-content').attr("next");
    } else if (workitem) {
      return '{{{apiUrl}}}' + workitem;
    } else {
      throw 'It was not possible to get the url to query.'
    }
  }

  function isEndOfScrollbar(el) {
    return (el.scrollTop() + el.innerHeight() >= el[0].scrollHeight);
  }
  
 function bindScrollEvent(commitStreamDomId) {
   $('#scrollable-content').on('scroll', function() {
     if (isEndOfScrollbar($(this))) {
       queryCommitStream(commitStreamDomId, getUrlToQuery(), function(commitStreamDomId, data) {
         if (thereAreNoCommits(data)) {
           window.CommitStream.errorHandler();
         } else {
           setData(data);
           renderCommits(data);
         }
       });
     }
   });
 }

    function queryCommitStreamRefresh() {};

    var autoRefreshIntervalId = null;

    function autoRefreshToggle() {
        var toggle = $(this);
        if (toggle.is(':checked')) {
            autoRefreshEnable();
        } else {
            autoRefreshDisable();
        }
    }

    function autoRefreshEnable() {
        if (autoRefreshIntervalId) {
            clearInterval(autoRefreshIntervalId);
        }
       autoRefreshIntervalId = setInterval(queryCommitStreamRefresh,
        window.CommitStream.autoRefreshIntervalInSeconds * 1000);
    }

    function autoRefreshDisable() {
        if (autoRefreshIntervalId) {
            clearInterval(autoRefreshIntervalId);
            autoRefreshIntervalId = null;
        }
    }

  function queryCommitStream(commitStreamDomId, apiUrl, cb) {
    $.getJSON(apiUrl).done(function(data) {
      cb(commitStreamDomId, data);
    }).fail(window.CommitStream.errorHandler);
  }

  // Put a commitStream object in the global space
  if (!window.CommitStream) {
    window.CommitStream = {
      commitsDisplay: function(commitStreamDomId, workitem, errorHandler) {
        try {
          window.CommitStream.errorHandler = errorHandler;

          var init = function(commitStreamDomId, data) {
            if (thereAreNoCommits(data)) {
              window.CommitStream.errorHandler();
            } else {
              setData(data);
              renderInit(commitStreamDomId, data);
            }
          }

          if (!hasAllDeps()) {
            $.getScript(requirejsUrl, function(data, status, jqxhr) {
              configureCommitStreamDependencies();
              queryCommitStream(commitStreamDomId, getUrlToQuery(workitem), init);
            }).fail(errorHandler);
          } else {
            queryCommitStream(commitStreamDomId, getUrlToQuery(workitem), init);
          }
        } catch (ex) {
          console.log(ex);
        }
      }
    };
  }
})();
