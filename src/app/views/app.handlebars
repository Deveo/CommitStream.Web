(function() {
  var handlebarsUrl = '//cdnjs.cloudflare.com/ajax/libs/handlebars.js/2.0.0-alpha.4/handlebars.amd.min',
    requirejsUrl = '//cdnjs.cloudflare.com/ajax/libs/require.js/2.1.14/require.min.js';

  function configureCommitStreamDependencies() {
    require.config({
      paths: {
        handlebars: handlebarsUrl
      }
    });
  }

  var deps = ['handlebars'];

  function hasAllDeps() {
    if (!window.requirejs) return false;
    for (var i = 0; i < deps.length; i++) {
      if (!requirejs.defined(deps[i])) return false;
    }
    return true;
  }

  var assetDetailInitTmpl = null;
  var assetDetailCommitsTmpl = null;

  function renderInit(commitStreamDomId, data) {
    try {
      var content = assetDetailInitTmpl(data);
      $(commitStreamDomId).html(content);
      $(commitStreamDomId).find('.cs-refresh').unbind('click');
      $(commitStreamDomId).find('.cs-refresh').bind('click', queryCommitStreamRefresh);
      $(commitStreamDomId).find('.toggle-cs-autorefresh').unbind('click');
      $(commitStreamDomId).find('.toggle-cs-autorefresh').bind('click', autoRefreshToggle);
      if (autoRefreshIntervalId) {
        $(commitStreamDomId).find('.toggle-cs-autorefresh').prop('checked', true);
      }
    } catch (ex) {
      window.CommitStream.errorHandler();
    }
  }

  function renderCommits(commitStreamDomId, data) {
    try {
      var content = assetDetailCommitsTmpl(data);
      $('#scrollable-content').append(content);
    } catch (ex) {
      window.CommitStream.errorHandler();
    }
  }

  function getAssetDetailCommitsTmpl() {
    require(deps, function(handlebars) {
      return assetDetailInitTmpl = handlebars.compile(source);
    }, window.CommitStream.errorHandler);
  }

  function init(commitStreamDomId, data) {
    if (!data || !data.commits) {
      window.CommitStream.errorHandler();
    } else {
      //extract function
      data.noCommits = data.commits.length < 1;
      data.resourcePath = "{{{resourcePath}}}";
      data.firstCommits = true;
      data.lastPage = false;

      if (assetDetailInitTmpl === null) {
        var tmplUrl = '{{{assetDetailTemplateUrl}}}' + 'assetDetailInit.html';
        $.get(tmplUrl).done(function(source) {
          try {
            assetDetailInitTmpl = window.CommitStream.handlebars.compile(source);
            renderInit(commitStreamDomId, data);
          } catch (ex) {
            window.CommitStream.errorHandler();
          }
        }).fail(window.CommitStream.errorHandler);
      } else {
        renderInit(commitStreamDomId, data);
      }

      if (!data._links || !data._links.next) {
        data.lastPage = true;
      } else {
        //TODO: puke
        setTimeout(function() {
          $('#scrollable-content').attr('next', data._links.next);
          bindScrollEvent('#scrollable-content');
        }, 1000);
      }
    }
  }

  function commits(commitStreamDomId, data) {
    if (!data || !data.commits) {
      window.CommitStream.errorHandler();
    } else {
      data.noCommits = data.commits.length < 1;
      data.resourcePath = "{{{resourcePath}}}";
      data.firstCommits = false;
      data.lastPage = false;

      if (!data._links || !data._links.next) {
        $('#scrollable-content').unbind('scroll');
        $('#scrollable-content').attr("next", '');
        data.lastPage = true;
      } else {
        $('#scrollable-content').attr('next', data._links.next);
      }

      if (assetDetailCommitsTmpl === null) {
        var tmplUrl = '{{{assetDetailTemplateUrl}}}' + 'assetDetailCommits.html';
        $.get(tmplUrl).done(function(source) {
          try {
            assetDetailCommitsTmpl = window.CommitStream.handlebars.compile(source);
            renderCommits('#scrollable-content', data);
          } catch (ex) {
            window.CommitStream.errorHandler();
          }
        }).fail(window.CommitStream.errorHandler);
      } else {
        renderCommits('#scrollable-content', data);
      }

      if (!data._links || !data._links.next) {
        $('#scrollable-content').unbind('scroll');
        $('#scrollable-content').attr("next", '');
        data.lastPage = true;
      } else {
        $('#scrollable-content').attr('next', data._links.next);
      }
    }
  }
    function queryCommitStreamRefresh() {};

    var autoRefreshIntervalId = null;

    function autoRefreshToggle() {
        var toggle = $(this);
        if (toggle.is(':checked')) {
            autoRefreshEnable();
        } else {
            autoRefreshDisable();
        }
    }

    function autoRefreshEnable() {
        if (autoRefreshIntervalId) {
            clearInterval(autoRefreshIntervalId);
        }
       autoRefreshIntervalId = setInterval(queryCommitStreamRefresh,
        window.CommitStream.autoRefreshIntervalInSeconds * 1000);
    }

    function autoRefreshDisable() {
        if (autoRefreshIntervalId) {
            clearInterval(autoRefreshIntervalId);
            autoRefreshIntervalId = null;
        }
    }

  function queryCommitStream(commitStreamDomId, workitem, cb) {
    var apiUrl;
    if ($('#scrollable-content').attr("next")) {
      apiUrl = $('#scrollable-content').attr("next");
    } else {
      apiUrl = '{{{apiUrl}}}' + workitem;
    }
    $.getJSON(apiUrl).done(function(data) {
      cb(commitStreamDomId, data);
    }).fail(window.CommitStream.errorHandler);
  }

  function invokeCommitStream(commitStreamDomId, workitem, cb) {
    require(deps, function(handlebars) {
      window.CommitStream.handlebars = handlebars.default;
      queryCommitStream(commitStreamDomId, workitem, cb);
    }, window.CommitStream.errorHandler);
  }

  var bindScrollEvent = function() {};
  // Put a commitStream object in the global space
  if (!window.CommitStream) {
    window.CommitStream = {
      commitsDisplay: function(commitStreamDomId, workitem, errorHandler) {
        try {
          window.CommitStream.errorHandler = errorHandler;
          window.CommitStream.commitStreamDomId = commitStreamDomId;

          bindScrollEvent = function(commitStreamDomId) {
            $('#scrollable-content').on('scroll', function() {
              if ($(this).scrollTop() + $(this).innerHeight() >= $(this)[0].scrollHeight) {
                invokeCommitStream(commitStreamDomId, workitem, commits);
              }
            });
          }

          if (!hasAllDeps()) {
            $.getScript(requirejsUrl, function(data, status, jqxhr) {
              configureCommitStreamDependencies();
              invokeCommitStream(commitStreamDomId, workitem, init);
            }).fail(errorHandler);
          } else {
            invokeCommitStream(commitStreamDomId, workitem, init);
          }
        } catch (ex) {
          console.log(ex);
        }
      }
    };
  }
})();
