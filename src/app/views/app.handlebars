(function() {
    var handlebarsUrl = '//cdnjs.cloudflare.com/ajax/libs/handlebars.js/2.0.0-alpha.4/handlebars.amd.min',
        requirejsUrl = '//cdnjs.cloudflare.com/ajax/libs/require.js/2.1.14/require.min.js';

    function configureCommitStreamDependencies() {
        require.config({
            paths: {
                handlebars: handlebarsUrl
            }
        });
    }

    function queryCommitStream(commitStreamDomId, workitem, handlebars, errorHandler) {
        $.getJSON('{{{apiUrl}}}' + workitem).done(function(data) {
            if (!data || !data.commits) {
                errorHandler();
            } else {
                data.noCommits = data.commits.length < 1;
                data.resourcePath = "{{{resourcePath}}}";
                $.get('{{{templateUrl}}}').done(function(source) {
                    try {
                        var template = handlebars.compile(source);
                        var content = template(data);
                        $(commitStreamDomId).html(content);
                    } catch(ex) {
                        errorHandler();
                    }
                }).fail(errorHandler);
            }
        }).fail(errorHandler);
    }

    function invokeCommitStream(commitStreamDomId, workitem, errorHandler) {
        require(['handlebars'], function(handlebars) {
            queryCommitStream(commitStreamDomId, workitem, handlebars.default, errorHandler);
        }, errorHandler);
    }

    // Put a commitStream object in the global space
    if (!window.CommitStream) {
        window.CommitStream = {
            commitsDisplay : function(commitStreamDomId, workitem, errorHandler) {
                $.getScript(requirejsUrl, function(data, status, jqxhr) {
                    configureCommitStreamDependencies();
                    invokeCommitStream(commitStreamDomId, workitem, errorHandler);
                }).fail(errorHandler);
            }
        };
    } else {
        window.CommitStream.commitsDisplay = invokeCommitStream;
    }
})();